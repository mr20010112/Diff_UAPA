defaults:
  - _self_
  - task: can_lowdim_abs #kitchen_lowdim_abs

name: train_diffusion_transformer_lowdim
_target_: diffusion_policy.workspace.pbrl_diffusion_transformer_lowdim_online_type1_workspace.PbrlDiffusionTransformerLowdimWorkspace
checkpoint_dir: 'data/experiments/low_dim/robomimic/lift/diffusion_policy_transformer/base_0.5/epoch=0050-test_mean_score=0.620.ckpt'

obs_dim: ${task.obs_dim}
action_dim: ${task.action_dim}
task_name: ${task.name}
exp_name: "default"

gamma: 0.999
horizon: 10
n_obs_steps: 2
n_action_steps: 8
n_latency_steps: 0
past_action_visible: False
keypoint_visible_rate: 1.0
obs_as_cond: True
pred_action_steps_only: False

policy: 
  _target_: diffusion_policy.policy.cpl_diffusion_transformer_lowdim_policy.DiffusionTransformerLowdimPolicy

  model: 
    _target_: diffusion_policy.model.diffusion.transformer_for_diffusion.TransformerForDiffusion
    input_dim: 10
    output_dim: 10
    horizon: ${horizon}
    n_obs_steps: ${n_obs_steps}
    cond_dim: 23

    n_layer: 8
    n_head: 4
    n_emb: 256
    p_drop_emb: 0.0
    p_drop_attn: 0.3

    causal_attn: True
    time_as_cond: True # if false, use BERT like encoder only arch, time as input
    obs_as_cond: ${obs_as_cond}
    n_cond_layers: 0 # >0: use transformer encoder for cond, otherwise use MLP

  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    variance_type: fixed_small # Yilun's paper uses fixed_small_log instead, but easy to cause Nan
    clip_sample: True # required when predict_epsilon=False
    prediction_type: epsilon # or sample

  gamma: ${gamma}
  beta: 0.00003125 #dpo:0.0005; cpl:0.00003125
  use_map: ${training.map.use_map}
  map_ratio: ${training.map.map_ratio}
  bias_reg: 0.25
  train_time_samples: 1
  horizon: ${horizon}
  obs_dim: ${obs_dim}
  action_dim: ${action_dim}
  n_action_steps: ${n_action_steps}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  obs_as_cond: ${obs_as_cond}
  pred_action_steps_only: ${pred_action_steps_only}

  # scheduler.step params
  # predict_epsilon: True

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.5
  power: 0.8
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 60
  num_workers: 1
  shuffle: True
  pin_memory: True
  persistent_workers: False

val_dataloader:
  batch_size: 60
  num_workers: 1
  shuffle: True
  pin_memory: True
  persistent_workers: False

optimizer:
  learning_rate: 1.0e-6
  weight_decay: 1.0e-3
  betas: [0.9, 0.95]

training:
  device_cpu: "cpu"
  device_gpu: "cuda:0"
  seed: 42
  debug: False
  resume: True
  # optimization
  lr_scheduler: cosine
  # Transformer needs LR warmup
  lr_warmup_steps: 0
  num_epochs: 15
  # lr_end: 1.0e-8
  # power: 1.5
  gradient_accumulate_every: 1
  use_ema: True
  # training loop control
  # in epochs
  rollout_every: 10
  checkpoint_every: 10
  val_every: 1
  sample_every: 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0
  dataset_1_dir: 'data/robomimic/datasets/can/normal/robomimic_data_0.5.h5'
  dataset_2_dir: 'data/robomimic/datasets/can/normal/robomimic_data_0.6.h5'
  online:
    num_groups: 4
    all_votes: 100
    reverse_ratio: 0.2
    reverse_rate: 0.5
    reverse_freq: 1
    update_history: False
  map:
    use_map: True # only true when use our method
    map_ratio: 0.2


logging:
  project: diffusion_policy_debug
  resume: True
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 5
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
